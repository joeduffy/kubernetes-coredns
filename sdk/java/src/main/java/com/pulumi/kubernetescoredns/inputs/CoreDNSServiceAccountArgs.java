// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetescoredns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CoreDNSServiceAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final CoreDNSServiceAccountArgs Empty = new CoreDNSServiceAccountArgs();

    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * If true, create &amp; use serviceAccount.
     * 
     */
    @Import(name="create")
    private @Nullable Output<Boolean> create;

    /**
     * @return If true, create &amp; use serviceAccount.
     * 
     */
    public Optional<Output<Boolean>> create() {
        return Optional.ofNullable(this.create);
    }

    /**
     * The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private CoreDNSServiceAccountArgs() {}

    private CoreDNSServiceAccountArgs(CoreDNSServiceAccountArgs $) {
        this.annotations = $.annotations;
        this.create = $.create;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CoreDNSServiceAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CoreDNSServiceAccountArgs $;

        public Builder() {
            $ = new CoreDNSServiceAccountArgs();
        }

        public Builder(CoreDNSServiceAccountArgs defaults) {
            $ = new CoreDNSServiceAccountArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param create If true, create &amp; use serviceAccount.
         * 
         * @return builder
         * 
         */
        public Builder create(@Nullable Output<Boolean> create) {
            $.create = create;
            return this;
        }

        /**
         * @param create If true, create &amp; use serviceAccount.
         * 
         * @return builder
         * 
         */
        public Builder create(Boolean create) {
            return create(Output.of(create));
        }

        /**
         * @param name The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CoreDNSServiceAccountArgs build() {
            return $;
        }
    }

}
