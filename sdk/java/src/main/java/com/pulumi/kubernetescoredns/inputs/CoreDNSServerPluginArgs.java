// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetescoredns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CoreDNSServerPluginArgs extends com.pulumi.resources.ResourceArgs {

    public static final CoreDNSServerPluginArgs Empty = new CoreDNSServerPluginArgs();

    /**
     * if the plugin supports extra block style config, supply it here
     * 
     */
    @Import(name="configBlock")
    private @Nullable Output<String> configBlock;

    /**
     * @return if the plugin supports extra block style config, supply it here
     * 
     */
    public Optional<Output<String>> configBlock() {
        return Optional.ofNullable(this.configBlock);
    }

    /**
     * name of plugin, if used multiple times ensure that the plugin supports it!
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return name of plugin, if used multiple times ensure that the plugin supports it!
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * list of parameters after the plugin
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<String> parameters;

    /**
     * @return list of parameters after the plugin
     * 
     */
    public Optional<Output<String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    private CoreDNSServerPluginArgs() {}

    private CoreDNSServerPluginArgs(CoreDNSServerPluginArgs $) {
        this.configBlock = $.configBlock;
        this.name = $.name;
        this.parameters = $.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CoreDNSServerPluginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CoreDNSServerPluginArgs $;

        public Builder() {
            $ = new CoreDNSServerPluginArgs();
        }

        public Builder(CoreDNSServerPluginArgs defaults) {
            $ = new CoreDNSServerPluginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configBlock if the plugin supports extra block style config, supply it here
         * 
         * @return builder
         * 
         */
        public Builder configBlock(@Nullable Output<String> configBlock) {
            $.configBlock = configBlock;
            return this;
        }

        /**
         * @param configBlock if the plugin supports extra block style config, supply it here
         * 
         * @return builder
         * 
         */
        public Builder configBlock(String configBlock) {
            return configBlock(Output.of(configBlock));
        }

        /**
         * @param name name of plugin, if used multiple times ensure that the plugin supports it!
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name name of plugin, if used multiple times ensure that the plugin supports it!
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameters list of parameters after the plugin
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters list of parameters after the plugin
         * 
         * @return builder
         * 
         */
        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        public CoreDNSServerPluginArgs build() {
            return $;
        }
    }

}
