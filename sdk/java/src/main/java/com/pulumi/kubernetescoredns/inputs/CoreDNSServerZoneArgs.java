// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetescoredns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CoreDNSServerZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final CoreDNSServerZoneArgs Empty = new CoreDNSServerZoneArgs();

    /**
     * optional, defaults to &#34;&#34; (which equals &#34;dns://&#34; in CoreDNS)
     * 
     */
    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    /**
     * @return optional, defaults to &#34;&#34; (which equals &#34;dns://&#34; in CoreDNS)
     * 
     */
    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    /**
     * set this parameter to optionally expose the port on tcp as well as udp for the DNS protocol. Note that this will not work if you are also exposing tls or grpc on the same server.
     * 
     */
    @Import(name="use_tcp")
    private @Nullable Output<Boolean> use_tcp;

    /**
     * @return set this parameter to optionally expose the port on tcp as well as udp for the DNS protocol. Note that this will not work if you are also exposing tls or grpc on the same server.
     * 
     */
    public Optional<Output<Boolean>> use_tcp() {
        return Optional.ofNullable(this.use_tcp);
    }

    /**
     * optional, defaults to &#34;.&#34;
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return optional, defaults to &#34;.&#34;
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private CoreDNSServerZoneArgs() {}

    private CoreDNSServerZoneArgs(CoreDNSServerZoneArgs $) {
        this.scheme = $.scheme;
        this.use_tcp = $.use_tcp;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CoreDNSServerZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CoreDNSServerZoneArgs $;

        public Builder() {
            $ = new CoreDNSServerZoneArgs();
        }

        public Builder(CoreDNSServerZoneArgs defaults) {
            $ = new CoreDNSServerZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scheme optional, defaults to &#34;&#34; (which equals &#34;dns://&#34; in CoreDNS)
         * 
         * @return builder
         * 
         */
        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme optional, defaults to &#34;&#34; (which equals &#34;dns://&#34; in CoreDNS)
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        /**
         * @param use_tcp set this parameter to optionally expose the port on tcp as well as udp for the DNS protocol. Note that this will not work if you are also exposing tls or grpc on the same server.
         * 
         * @return builder
         * 
         */
        public Builder use_tcp(@Nullable Output<Boolean> use_tcp) {
            $.use_tcp = use_tcp;
            return this;
        }

        /**
         * @param use_tcp set this parameter to optionally expose the port on tcp as well as udp for the DNS protocol. Note that this will not work if you are also exposing tls or grpc on the same server.
         * 
         * @return builder
         * 
         */
        public Builder use_tcp(Boolean use_tcp) {
            return use_tcp(Output.of(use_tcp));
        }

        /**
         * @param zone optional, defaults to &#34;.&#34;
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone optional, defaults to &#34;.&#34;
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public CoreDNSServerZoneArgs build() {
            return $;
        }
    }

}
