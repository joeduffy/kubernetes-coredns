// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetescoredns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetescoredns.inputs.CoreDNSImageArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CoreDNSAutoscalerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CoreDNSAutoscalerArgs Empty = new CoreDNSAutoscalerArgs();

    /**
     * Number of cores in the cluster per coredns replica.
     * 
     */
    @Import(name="coresPerReplica")
    private @Nullable Output<Integer> coresPerReplica;

    /**
     * @return Number of cores in the cluster per coredns replica.
     * 
     */
    public Optional<Output<Integer>> coresPerReplica() {
        return Optional.ofNullable(this.coresPerReplica);
    }

    /**
     * Enabled the cluster-proportional-autoscaler.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enabled the cluster-proportional-autoscaler.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The image to pull from for the autoscaler.
     * 
     */
    @Import(name="image")
    private @Nullable Output<CoreDNSImageArgs> image;

    /**
     * @return The image to pull from for the autoscaler.
     * 
     */
    public Optional<Output<CoreDNSImageArgs>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Whether to include unschedulable nodes in the nodes/cores calculations - this requires version 1.8.0+ of the autoscaler.
     * 
     */
    @Import(name="includeUnschedulableNodes")
    private @Nullable Output<Boolean> includeUnschedulableNodes;

    /**
     * @return Whether to include unschedulable nodes in the nodes/cores calculations - this requires version 1.8.0+ of the autoscaler.
     * 
     */
    public Optional<Output<Boolean>> includeUnschedulableNodes() {
        return Optional.ofNullable(this.includeUnschedulableNodes);
    }

    /**
     * Max size of replicaCount
     * 
     */
    @Import(name="max")
    private @Nullable Output<Integer> max;

    /**
     * @return Max size of replicaCount
     * 
     */
    public Optional<Output<Integer>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * Min size of replicaCount
     * 
     */
    @Import(name="min")
    private @Nullable Output<Integer> min;

    /**
     * @return Min size of replicaCount
     * 
     */
    public Optional<Output<Integer>> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * Number of nodes in the cluster per coredns replica.
     * 
     */
    @Import(name="nodesPerReplica")
    private @Nullable Output<Integer> nodesPerReplica;

    /**
     * @return Number of nodes in the cluster per coredns replica.
     * 
     */
    public Optional<Output<Integer>> nodesPerReplica() {
        return Optional.ofNullable(this.nodesPerReplica);
    }

    /**
     * If true does not allow single points of failure to form.
     * 
     */
    @Import(name="preventSinglePointFailure")
    private @Nullable Output<Boolean> preventSinglePointFailure;

    /**
     * @return If true does not allow single points of failure to form.
     * 
     */
    public Optional<Output<Boolean>> preventSinglePointFailure() {
        return Optional.ofNullable(this.preventSinglePointFailure);
    }

    private CoreDNSAutoscalerArgs() {}

    private CoreDNSAutoscalerArgs(CoreDNSAutoscalerArgs $) {
        this.coresPerReplica = $.coresPerReplica;
        this.enabled = $.enabled;
        this.image = $.image;
        this.includeUnschedulableNodes = $.includeUnschedulableNodes;
        this.max = $.max;
        this.min = $.min;
        this.nodesPerReplica = $.nodesPerReplica;
        this.preventSinglePointFailure = $.preventSinglePointFailure;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CoreDNSAutoscalerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CoreDNSAutoscalerArgs $;

        public Builder() {
            $ = new CoreDNSAutoscalerArgs();
        }

        public Builder(CoreDNSAutoscalerArgs defaults) {
            $ = new CoreDNSAutoscalerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coresPerReplica Number of cores in the cluster per coredns replica.
         * 
         * @return builder
         * 
         */
        public Builder coresPerReplica(@Nullable Output<Integer> coresPerReplica) {
            $.coresPerReplica = coresPerReplica;
            return this;
        }

        /**
         * @param coresPerReplica Number of cores in the cluster per coredns replica.
         * 
         * @return builder
         * 
         */
        public Builder coresPerReplica(Integer coresPerReplica) {
            return coresPerReplica(Output.of(coresPerReplica));
        }

        /**
         * @param enabled Enabled the cluster-proportional-autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enabled the cluster-proportional-autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param image The image to pull from for the autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<CoreDNSImageArgs> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image to pull from for the autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder image(CoreDNSImageArgs image) {
            return image(Output.of(image));
        }

        /**
         * @param includeUnschedulableNodes Whether to include unschedulable nodes in the nodes/cores calculations - this requires version 1.8.0+ of the autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder includeUnschedulableNodes(@Nullable Output<Boolean> includeUnschedulableNodes) {
            $.includeUnschedulableNodes = includeUnschedulableNodes;
            return this;
        }

        /**
         * @param includeUnschedulableNodes Whether to include unschedulable nodes in the nodes/cores calculations - this requires version 1.8.0+ of the autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder includeUnschedulableNodes(Boolean includeUnschedulableNodes) {
            return includeUnschedulableNodes(Output.of(includeUnschedulableNodes));
        }

        /**
         * @param max Max size of replicaCount
         * 
         * @return builder
         * 
         */
        public Builder max(@Nullable Output<Integer> max) {
            $.max = max;
            return this;
        }

        /**
         * @param max Max size of replicaCount
         * 
         * @return builder
         * 
         */
        public Builder max(Integer max) {
            return max(Output.of(max));
        }

        /**
         * @param min Min size of replicaCount
         * 
         * @return builder
         * 
         */
        public Builder min(@Nullable Output<Integer> min) {
            $.min = min;
            return this;
        }

        /**
         * @param min Min size of replicaCount
         * 
         * @return builder
         * 
         */
        public Builder min(Integer min) {
            return min(Output.of(min));
        }

        /**
         * @param nodesPerReplica Number of nodes in the cluster per coredns replica.
         * 
         * @return builder
         * 
         */
        public Builder nodesPerReplica(@Nullable Output<Integer> nodesPerReplica) {
            $.nodesPerReplica = nodesPerReplica;
            return this;
        }

        /**
         * @param nodesPerReplica Number of nodes in the cluster per coredns replica.
         * 
         * @return builder
         * 
         */
        public Builder nodesPerReplica(Integer nodesPerReplica) {
            return nodesPerReplica(Output.of(nodesPerReplica));
        }

        /**
         * @param preventSinglePointFailure If true does not allow single points of failure to form.
         * 
         * @return builder
         * 
         */
        public Builder preventSinglePointFailure(@Nullable Output<Boolean> preventSinglePointFailure) {
            $.preventSinglePointFailure = preventSinglePointFailure;
            return this;
        }

        /**
         * @param preventSinglePointFailure If true does not allow single points of failure to form.
         * 
         * @return builder
         * 
         */
        public Builder preventSinglePointFailure(Boolean preventSinglePointFailure) {
            return preventSinglePointFailure(Output.of(preventSinglePointFailure));
        }

        public CoreDNSAutoscalerArgs build() {
            return $;
        }
    }

}
