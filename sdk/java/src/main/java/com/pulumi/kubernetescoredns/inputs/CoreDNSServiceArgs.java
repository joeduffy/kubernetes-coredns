// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetescoredns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CoreDNSServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CoreDNSServiceArgs Empty = new CoreDNSServiceArgs();

    /**
     * Annotations to add to service.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations to add to service.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * IP address to assign to service.
     * 
     */
    @Import(name="clusterIP")
    private @Nullable Output<String> clusterIP;

    /**
     * @return IP address to assign to service.
     * 
     */
    public Optional<Output<String>> clusterIP() {
        return Optional.ofNullable(this.clusterIP);
    }

    /**
     * External IP addresses.
     * 
     */
    @Import(name="externalIPs")
    private @Nullable Output<List<String>> externalIPs;

    /**
     * @return External IP addresses.
     * 
     */
    public Optional<Output<List<String>>> externalIPs() {
        return Optional.ofNullable(this.externalIPs);
    }

    /**
     * Enable client source IP preservation.
     * 
     */
    @Import(name="externalTrafficPolicy")
    private @Nullable Output<String> externalTrafficPolicy;

    /**
     * @return Enable client source IP preservation.
     * 
     */
    public Optional<Output<String>> externalTrafficPolicy() {
        return Optional.ofNullable(this.externalTrafficPolicy);
    }

    /**
     * IP address to assign to load balancer (if supported).
     * 
     */
    @Import(name="loadBalancerIP")
    private @Nullable Output<String> loadBalancerIP;

    /**
     * @return IP address to assign to load balancer (if supported).
     * 
     */
    public Optional<Output<String>> loadBalancerIP() {
        return Optional.ofNullable(this.loadBalancerIP);
    }

    /**
     * The name of the Service. If not set, a name is generated using the fullname template.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Service. If not set, a name is generated using the fullname template.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private CoreDNSServiceArgs() {}

    private CoreDNSServiceArgs(CoreDNSServiceArgs $) {
        this.annotations = $.annotations;
        this.clusterIP = $.clusterIP;
        this.externalIPs = $.externalIPs;
        this.externalTrafficPolicy = $.externalTrafficPolicy;
        this.loadBalancerIP = $.loadBalancerIP;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CoreDNSServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CoreDNSServiceArgs $;

        public Builder() {
            $ = new CoreDNSServiceArgs();
        }

        public Builder(CoreDNSServiceArgs defaults) {
            $ = new CoreDNSServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations to add to service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations to add to service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param clusterIP IP address to assign to service.
         * 
         * @return builder
         * 
         */
        public Builder clusterIP(@Nullable Output<String> clusterIP) {
            $.clusterIP = clusterIP;
            return this;
        }

        /**
         * @param clusterIP IP address to assign to service.
         * 
         * @return builder
         * 
         */
        public Builder clusterIP(String clusterIP) {
            return clusterIP(Output.of(clusterIP));
        }

        /**
         * @param externalIPs External IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder externalIPs(@Nullable Output<List<String>> externalIPs) {
            $.externalIPs = externalIPs;
            return this;
        }

        /**
         * @param externalIPs External IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder externalIPs(List<String> externalIPs) {
            return externalIPs(Output.of(externalIPs));
        }

        /**
         * @param externalIPs External IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder externalIPs(String... externalIPs) {
            return externalIPs(List.of(externalIPs));
        }

        /**
         * @param externalTrafficPolicy Enable client source IP preservation.
         * 
         * @return builder
         * 
         */
        public Builder externalTrafficPolicy(@Nullable Output<String> externalTrafficPolicy) {
            $.externalTrafficPolicy = externalTrafficPolicy;
            return this;
        }

        /**
         * @param externalTrafficPolicy Enable client source IP preservation.
         * 
         * @return builder
         * 
         */
        public Builder externalTrafficPolicy(String externalTrafficPolicy) {
            return externalTrafficPolicy(Output.of(externalTrafficPolicy));
        }

        /**
         * @param loadBalancerIP IP address to assign to load balancer (if supported).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerIP(@Nullable Output<String> loadBalancerIP) {
            $.loadBalancerIP = loadBalancerIP;
            return this;
        }

        /**
         * @param loadBalancerIP IP address to assign to load balancer (if supported).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerIP(String loadBalancerIP) {
            return loadBalancerIP(Output.of(loadBalancerIP));
        }

        /**
         * @param name The name of the Service. If not set, a name is generated using the fullname template.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Service. If not set, a name is generated using the fullname template.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CoreDNSServiceArgs build() {
            return $;
        }
    }

}
